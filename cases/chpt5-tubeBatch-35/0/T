/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       volScalarField;
    location    "0";
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];

internalField   uniform 300;

boundaryField
{
    btm
    {
        type        zeroGradient;        type            groovyBC;
        value           uniform 300;
        valueExpression "Tinf_Met";
        gradientExpression "0";
        fractionExpression "f_Met";
        evaluateDuringConstruction 0;
        cyclicSlave     0;
        variables       
6
(
"k_Met=0.02;"
"Tinf_Met=300;"
//"alpha_Met=10;"
"sig_rad=5.6e-8;"
"emmi=0;"
"alpha_Met=50+(sig_rad*emmi*(pow(T,2)+pow(Tinf_Met,2))*(T+Tinf_Met));"
"f_Met=1/(1+k_Met/(alpha_Met*mag(delta())));"
)
;
        timelines       (
);
        lookuptables    (
);
        lookuptables2D  (
);    }
    top
    {
        type        zeroGradient;        type            groovyBC;
        value           uniform 300;
        valueExpression "Tinf_Met";
        gradientExpression "0";
        fractionExpression "f_Met";
        evaluateDuringConstruction 0;
        cyclicSlave     0;
        variables       
6
(
"k_Met=31;"
"Tinf_Met=300;"
//"alpha_Met=10;"
"sig_rad=5.6e-8;"
"emmi=0.525;"
"alpha_Met=10+(sig_rad*emmi*(pow(T,2)+pow(Tinf_Met,2))*(T+Tinf_Met));"
"f_Met=1/(1+k_Met/(alpha_Met*mag(delta())));"
)
;
        timelines       (
);
        lookuptables    (
);
        lookuptables2D  (
);    }
    side1Andside2Andside3
    {
        $top;
    }
    top_side1Andside2Andside3
    {
        $top;
    }
    btm_side1Andside2Andside3
    {
        $btm;
    }
    frontAndBack
    {
        type            empty;
    }
}           

// ************************************************************************* //
